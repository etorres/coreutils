<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Core Utils - Parent Project.
Copyright 2015-2016 GRyCAP (Universitat Politecnica de Valencia)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

This product combines work with different licenses. See the "NOTICE" text
file for details on the various modules and licenses.

The "NOTICE" text file is part of the distribution. Any derivative works
that you distribute must include a readable copy of the "NOTICE" text file.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>es.upv.grycap.coreutils</groupId>
	<artifactId>coreutils</artifactId>
	<version>0.1.0</version>
	<packaging>pom</packaging>
	
	<name>Core utils project</name>
	<description>Core utils parent pom</description>
	<url>https://github.com/grycap/coreutils</url>
	
	<inceptionYear>2015</inceptionYear>
	
	<organization>
		<name>GRyCAP</name>
		<url>http://www.grycap.upv.es/</url>
	</organization>
	
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<scm>
		<url>https://github.com/grycap/coreutils</url>
		<connection>scm:git:git://github.com/grycap/coreutils.git</connection>
		<developerConnection>scm:git:git@github.com:grycap/coreutils.git</developerConnection>
	</scm>
	
	<developers>
		<developer>
			<email>etserrano@gmail.com</email>
			<name>Erik Torres</name>
			<url>https://github.com/etorres</url>
			<id>etorres</id>
		</developer>		
	</developers>
	
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<!-- Convenience properties to set library versions -->
		<ch.qos.logback.version>1.1.3</ch.qos.logback.version>
		<junit.version>4.12</junit.version> <!-- affects Hamcrest version -->		
		<es.upv.grycap.coreutils.version>${project.version}</es.upv.grycap.coreutils.version>
		<org.hamcrest.version>1.3</org.hamcrest.version> <!-- affected by JUnit version -->
		<org.mock-server.version>3.10.2</org.mock-server.version>
		<org.slf4j.version>1.7.13</org.slf4j.version>
		
		<!-- Convenience properties to set Maven plugins versions -->
		<m2e.lifecycle-mapping.version>1.0.0</m2e.lifecycle-mapping.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<maven-compiler-plugin.version>3.3</maven-compiler-plugin.version>
		<maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>
		<maven-failsafe-plugin.version>2.19</maven-failsafe-plugin.version>
		<maven-surefire-plugin.version>2.19</maven-surefire-plugin.version>		
		<mockserver-maven-plugin.version>3.10.2</mockserver-maven-plugin.version>
	</properties>
	
	<dependencyManagement>
		<dependencies>
			<!-- Apache Commons: Collection of open source reusable Java components -->	
			<dependency> <!-- Utility classes for the classes that are considered to be Java standards -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>3.4</version>
			</dependency>
			<dependency> <!-- I/O utilities -->
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.4</version>
			</dependency>
		
			<!-- JSR-305 annotations for Software Defect Detection -->
			<dependency>
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>3.0.1</version>
			</dependency>			
			
			<!-- Google Gson library -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>2.5</version>
			</dependency>
			
			<!--  Configuration library  -->
			<dependency>
				<groupId>com.typesafe</groupId>
				<artifactId>config</artifactId>
				<version>1.3.0</version>
			</dependency>			
			
			<!-- Integrates with Quasar fibers via the Comsat APIs -->
			<dependency>
				<groupId>co.paralleluniverse</groupId>
				<artifactId>quasar-core</artifactId>
				<version>0.7.3</version>
				<classifier>jdk8</classifier>
			</dependency>
			<dependency> <!-- Apache HTTP client -->
				<groupId>co.paralleluniverse</groupId>
				<artifactId>comsat-httpclient</artifactId>
				<version>0.5.0</version>
			</dependency>
			<dependency> <!-- Modern HTTP+SPDY client -->
				<groupId>co.paralleluniverse</groupId>
				<artifactId>comsat-okhttp</artifactId>
				<version>0.5.0</version>
			</dependency>
			
			<!-- Logback logging framework -->
			<dependency> <!-- classic module (uses the SLF4J API) -->
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${ch.qos.logback.version}</version>
				<exclusions>
					<exclusion> <!-- use the SLF4J version included with the bridges -->
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- SLF4J logging framework -->			
			<dependency> <!-- java.util.logging (jul) bridge -->
				<groupId>org.slf4j</groupId>
				<artifactId>jul-to-slf4j</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>
			<dependency> <!-- Log4j implemented over SLF4J -->
				<groupId>org.slf4j</groupId>
				<artifactId>log4j-over-slf4j</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>
			
			<!-- JUnit unit testing framework for Java -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			
			<!-- Hamcrest library of matcher implementations -->
			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-library</artifactId>
				<version>${org.hamcrest.version}</version>
				<exclusions>
					<exclusion> <!-- Exclude Hamcrest core, which is transitively included with JUnit -->
						<groupId>org.hamcrest</groupId>
						<artifactId>hamcrest-core</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- A toolkit for testing multi-threaded code -->
			<dependency>
				<groupId>net.jodah</groupId>
				<artifactId>concurrentunit</artifactId>
				<version>0.4.2</version>
			</dependency>
			
			<!-- MockServer -->
			<dependency>
            	<groupId>org.mock-server</groupId>
            	<artifactId>mockserver-integration-testing</artifactId>
            	<version>${org.mock-server.version}</version>
        	</dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<pluginManagement>
			<plugins>
				<!-- Maven Compiler Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>					
				</plugin>
				<!-- MockServer Plugin -->
				<plugin>
	                <groupId>org.mock-server</groupId>
	                <artifactId>mockserver-maven-plugin</artifactId>
	                <version>${mockserver-maven-plugin.version}</version>
	                <configuration>
	                    <serverPort>9080</serverPort>
	                    <logLevel>WARN</logLevel>
	                    <pipeLogToConsole>true</pipeLogToConsole>
	                </configuration>
	                <executions>
	                    <execution>
	                        <id>pre-integration-test</id>
	                        <phase>pre-integration-test</phase>
	                        <goals>
	                            <goal>start</goal>
	                        </goals>
	                    </execution>
	                    <execution>
	                        <id>post-integration-test</id>
	                        <phase>post-integration-test</phase>
	                        <goals>
	                            <goal>stop</goal>
	                        </goals>
	                    </execution>
	                </executions>
	                <dependencies>
	                    <dependency>
	                        <groupId>org.mock-server</groupId>
	                        <artifactId>mockserver-integration-testing</artifactId>
	                        <version>${org.mock-server.version}</version>
	                    </dependency>
	                </dependencies>
	            </plugin>
				<!-- Maven Surefire Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<dependencies>					
						<dependency> <!-- SureFire JUnitCore (JUnit 4.7+) Runner -->
							<groupId>org.apache.maven.surefire</groupId>
							<artifactId>surefire-junit47</artifactId>
							<version>${maven-surefire-plugin.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<includes>
							<include>**/*Test.java</include>
						</includes>
						<excludedGroups>es.upv.grycap.coreutils.test.category.IntegrationTests</excludedGroups>						
					</configuration>
				</plugin>
				<!-- Maven Failsafe Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<dependencies>					
						<dependency> <!-- SureFire JUnitCore (JUnit 4.7+) Runner -->
							<groupId>org.apache.maven.surefire</groupId>
							<artifactId>surefire-junit47</artifactId>
							<version>${maven-surefire-plugin.version}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<includes>
							<include>**/*Test.java</include>
						</includes>
						<groups>es.upv.grycap.coreutils.test.category.IntegrationTests</groups>
					</configuration>
				</plugin>
				<!-- Cobertura: creates code coverage reports -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<format>xml</format>
						<maxmem>256m</maxmem>
						<aggregate>true</aggregate>
						<quiet>true</quiet>						
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- Cobertura: creates code coverage reports -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>				
			</plugin>
			<!-- Submit code coverage reports to Coveralls web service -->
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.0.0</version>				
			</plugin>
		</plugins>
	</build>
	
	<modules>
		<module>coreutils-test</module>
		<module>coreutils-common</module>		
		<module>coreutils-logging</module>
		<module>coreutils-fiber</module>
	</modules>
</project>